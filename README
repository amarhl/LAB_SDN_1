Hello Git World
#create just a regular function
def message():
     print("This is an example of a simple function")
     
def shoCharacter(character_:
     print(character)
batman(Character = "Batman"
showCharacter(batmanCharacter)
batmanCharacters = ['Batman', 'Robin', 'Joker', 'Bane']

class Character_Inherit():
	''' CLASS OF BATMAN CHARACTER'''
	def __init__(self, name, alias, role, abilities):
		'''Initialize Values'''
		self.name = name
		self.alias = alias
		self.role = role
		self.abilities - abilities
	def getName(self):
		name = self.name
		return name
	
	def getAbilitity(self):
		ability = self.abilities
		return ability
	
	def getRole(self):
		role = self.role
		return role
		
	def getAlias(self):
		alias = self.alias
		return alias
		
		
# LAB 5 Python Function
# Print Functions - For the first section we will simple create a function that does not accept an argument but prints a 
# message to the screen. Write a print functions that do not require arguments that prints a message to the screen. 
# Include  a screenshot of your code and the output of the function. 
def first_function():
	print("This is my first function without arguments")
#first_message() # type this in to get the Global
def second_function():
	print("This is my second function without arguments")
#second_message() # type this in to get the global


# Lab 5 Simple Functions with Single Arguments
# For this section we will demonstrate the use of a function with a single argument. Create two functions that print a 
# message to the terminal along with the value of the argument. Create a variable per function for a total of two variables 
# and pass them into the function. 

headphone01 = "sennheiser"
headphone02 = "hifiman"
def my_headphone(hiFidelity):
	print("My favorite headphone is " + hiFidelity)
# my_headphone(headphone01) # type this in
def my_headphone(hiFidelity):
	print("My favorite headphone is " + hiFedelity)
# my_headphone(headphone02) # type this in


# Lab 5 Ordered Arguments
# In this section we are going to create two functions that accepts more than one argument as ordered arguments. Create
# two separate functions and execute the code twice against different arguments. 
headphone01 = "sennheiser"
headphone02 = "hifiman"
style01 = "open back headphone"
style02 = "closed back headphone"
def my_headphone(hiFidelity, style):
	print("My favorite headphone is " + hiFidelity + " and it is " + style)
# my_headphone(headpone01, style01) # type this is in global


# Lab 5 List Arguments and For Loops
# For the final example create two lists that are to be passed into your function. Create a function with a for loop
# in it that will execute against all elements in the lists you pass through. Execute the function passing in your list. 
# The output should be the code of your function is executed against each element. 
def my_headphone(hiFidelity):
	for h in hiFidelity:
		print(h) # do not forget to indent this print #
headphones = ['sennheiser', 'hifiman', 'bose', 'audeze']
# my_headphone(headphones) # type this in the global
def music_online(streaming):
	for s in streaming:
		print(s)
services = ['iTunes', 'Tidal', 'Qobuz', 'Spotify']
# music_online(services) # type this in 
	
	
	

# Lab 6 Python Class Lab
# Example requirement(quantity)
# Change directory (5) <-- command should be entered fives times
mkdir Lab6_Folder1 # all the way to Lab6_Folder5
cd Lab6 


# Lab 6 Create Python Classes
# Create a simple class with at least four attibutes and four instances (5)
class Headphone():
	'''Class of Headphone'''
	def __init__(self, name, style, quality, imaging, sound_profile):
		'''Initialize Values'''
	     	self.name = name
	     	self.style = style
	     	self.quality = quality
	     	self.imaging = imaging
	     	self.sound_profile = sound_profile  
	     
Headphone01 = Headphone('sennheiser', 'open back headphone', 'medium quality build', 'excellent', ' v shape sound')
Headphone02 = Headphone('bose', 'close back headphone', 'premium quality build', ' average', 'neutral sound')
Headphone03 = Headphone('hifiman', 'in ear monitor', 'high quality build', 'normal', 'bassy sound')
Headphone04 = Headphone('focal', 'open back headphone', 'premium quality build', 'excellent imaging', 'm shape sound')

class Car():
	'''Class of Car'''
	def __init__(self, name, style, build, price):
		'''Initialiaze Values'''  
		self.name = name
		self.style = style
		self.build = build
		self.price = price
		
Car01 = Car('toyota', 'sedan', 'excellent', 'affortable')
Car02 = Car('nissan', 'two door', 'average', 'pricey')
Car03 = Car('honda', 'sedan', 'medium', 'great price')
Car04 = Car('hyundai', 'sporty', 'excellent', 'normal price')
	  
class Fruit():
	'''Class of Fruit'''
	def __init__(self, name, category, dietary_vitamins, classification):
		'''Initialiaze Values'''
		self.name = name
		self.category = category
		self.dietary_vitamins = dietary_vitamins		
		self.classification = classification
		
Fruit01 = Fruit('berry', 'seedless', 'vitamin c', 'vine')
Fruit02 = Fruit('banana', 'seedless', 'vitamin b', 'tree')
Fruit03 = Fruit('strawberry', 'seedy', 'vitamin c', 'plant')
Fruit04 = Fruit('pumpkin', 'seedy', 'vitamin a', 'vine')


class Student():
	'''Class of Student'''
	def __init__(self, name, course, term, status):
		'''Initializa Values'''
		self.name = name
		self.course = course
		self.term = term
		self.status = status
		
Student01 = Student('henry', 'SDN', 'fall semester', 'full time', '37')
Student02 = Student('bhing', 'SDN', 'spring semester', 'part time', '32')
Student03 = Student('levi', 'SPN 1002', 'summer semester', 'part time', '16')
Student04 = Student('julianah', 'ENC 1101', 'fall semester', 'full time', '21')

class Laptop():
	'''Class of Laptop'''
	def __init__(self, name, ram, speed, hard_drive):
		'''Initialize Values'''
		self.name = name
		self.ram = ram
		self.speed =speed
		self.hard_drive = hard_drive
		
Laptop01 = Laptop('dell', '16 GB', '3 Ghz', '100 GB')		
Laptop02 = Laptop('hp', '8 GB', '2 Ghz', '120 GB')
Laptop03 = Laptop('acer','32 GB', '4 Ghz', '500 GB')
Laptop04 = Laptop('gateway', '6 GB', '1 Ghz', '80 GB')
	     


# Lab 6 Class Methods 
# Create at least two methods for each class from above and execute from the instances created in the previous step. 
class Headphone():
	'''Class of Headphone'''
	def __init__(self, name, style, quality, imaging, sound_profile):
		'''Initialize Values'''
		self.name = name
		self.style = style	
		self.quality = quality
		self.imaging = imaging
		self.sound_profile = sound_profile  
	def getdesc(self):
		description = f'Device Name		:{self.name}\n'\	
			      f'Device Style		:{self.style}\n'\
			      f'Quality			:{self.quality}\n'\
			      f'Imaging			:{self.imaging}\n'\
			      f'Sound Profile		:{self.sound_profile}'
		return desc
	     
Headphone01 = Headphone('sennheiser', 'open back headphone', 'medium quality build', 'excellent', ' v shape sound')
Headphone02 = Headphone('bose', 'close back headphone', 'premium quality build', ' average', 'neutral sound')
Headphone03 = Headphone('hifiman', 'in ear monitor', 'high quality build', 'normal', 'bassy sound')
Headphone04 = Headphone('focal', 'open back headphone', 'premium quality build', 'excellent imaging', 'm shape sound')
print('HeadPhone01\n', Headphone01.getdesc(), '\n', sep='')
print('HeadPhone02\n', Headphone04.getdesc(), sep='')

# Lab 6 Class Methods another example ###
class Student():
	'''Class of Student'''
	def __init__(self, name, course, term, status, age):
		'''Initializa Values'''
		self.name = name
		self.course = course
		self.term = term
		self.status = status
		self.age = age
	def getdesc(self):
		desc =  f'Student Name			:{self.name}\n'\	
			f'Course Enrolled		:{self.course}\n'\
			f'Term				:{self.term}\n'\
			f'Status			:{self.status}\n'\
			f'Age				:{self.age}'
		return desc
	     		
Student01 = Student('henry', 'SDN', 'fall semester', 'full time', '37')
Student02 = Student('bhing', 'SDN', 'spring semester', 'part time', '32')
Student03 = Student('levi', 'SPN 1002', 'summer semester', 'part time', '16')
Student04 = Student('julianah', 'ENC 1101', 'fall semester', 'full time', '21')
print('StudentOne\n', Student03.getdesc(), '\n', sep='')
print('StudentTwo\n', Student04.getdesc(), sep='')


# Lab 6  Inheritance
# Create two child classes that inherit values from all the classes defined in previous steps and create at least four instances. 
# Create at least one method for eveyr child class specific to that class and execute the methods from instances of the class. 
class Headphone():
	'''Class of Headphone'''
	def __init__(self, name, style, quality, imaging, sound_profile):
		'''Initialize Values'''
		self.name = name
		self.style = style	
		self.quality = quality
		self.imaging = imaging
		self.sound_profile = sound_profile  
	def getdesc(self):
		desc =	f'Device Name 		:{self.name}\n'\	
			f'Device Style		:{self.style}\n'\
			f'Quality		:{self.quality}\n'\
			f'Imaging		:{self.imaging}\n'\
			f'Sound Profile		:{self.sound_profile}'
		return desc
class InEarMonitor(Headphone):
	'''return a formatted description of the in ear monitor'''
	def getdesc(self):
		desc =	f'Device Name 		:{self.name}\n'\
			f'Device Style 		:{self.style}\n'\
			f'Quality		:{self.quality}\n'\
			f'Imaging		:{self.imaging}\n'\
			f'Sound Quality		:{self.sound_profile}'
		return desc

Headphone01 = Headphone('sennheiser', 'open back headphone', 'medium quality build', 'excellent', ' v shape sound')
Headphone02 = Headphone('bose', 'close back headphone', 'premium quality build', ' average', 'neutral sound')
Headphone03 = Headphone('hifiman', 'in ear monitor', 'high quality build', 'normal', 'bassy sound')
Headphone04 = Headphone('focal', 'open back headphone', 'premium quality build', 'excellent imaging', 'm shape sound')
Headphone05 = InEarMonitor('Shure', 'semi open headphone', 'premium quility build', 'top notch', 'neutral sound')
print('InEarMonitor01\n', Headphone05.getdesc(), sep ='')
print('HeadPhone01\n', Headphone01.getdesc(), '\n', sep='')
print('HeadPhone02\n', Headphone04.getdesc(), sep='')

#Lab 6 Inheritance another example ##
class Student():
	'''Class of Student'''
	def __init__(self, name, course, term, status, age):
		'''Initializa Values'''
		self.name = name
		self.course = course
		self.term = term
		self.status = status
		self.age = age
	def getdesc(self):
		desc =  f'Student Name  		:{self.name}\n'\	
			f'Course Enrolled  		:{self.course}\n'\
			f'Term  			:{self.term}\n'\
			f'Status  			:{self.status}\n'\
			f'Age  				:{self.age}'
		return desc
class TransferStudent(Student):
	'''return a formatted description of the transfer student'''
	def getdesc(self):
		desc = f'Student Name  		:{self.name}\n'\
		       f'Course Enrolled  	:{self.course}\n'\
		       f'Term  			:{self.term}\n'\
		       f'Status  		:{self.status}\n'\
		       f'Age			:{self.age}'
		return desc
		
student03 = Student('levi', 'SPN 1102', 'summer semester', 'part time', '16')
student04 = Student('julianah', 'ENC 1101', 'fall semester', 'full time', '21')
student05 = TransferStudent('angelo', 'algebra 1', 'spring semester', 'full time', '27')
print('Studentone\n', student04.getdesc(), '\n', sep='')
print('TransferStudentOne\n', student05.getdesc(), '\n', sep='')




# Lab 6 Importing from a Module
# Import the classes individually from a module and create at least two instances
# import at least two classes using aliases and create at least two instances using the alias. 
